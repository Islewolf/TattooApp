// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TattooApp.Models;

#nullable disable

namespace TattooApp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20251008224102_InitialTattooShop")]
    partial class InitialTattooShop
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtistSpecialty", b =>
                {
                    b.Property<long>("ArtistsArtistId")
                        .HasColumnType("bigint");

                    b.Property<long>("SpecialtiesSpecialtyId")
                        .HasColumnType("bigint");

                    b.HasKey("ArtistsArtistId", "SpecialtiesSpecialtyId");

                    b.HasIndex("SpecialtiesSpecialtyId");

                    b.ToTable("ArtistSpecialty");
                });

            modelBuilder.Entity("TattooApp.Models.Appointment", b =>
                {
                    b.Property<long>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ArtistId")
                        .HasColumnType("bigint");

                    b.Property<string>("ClientEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("TattooDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("ArtistId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("TattooApp.Models.Artist", b =>
                {
                    b.Property<long>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ArtistId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArtistId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("TattooApp.Models.Binder", b =>
                {
                    b.Property<long>("BinderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BinderId"));

                    b.Property<long>("ArtistId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BinderId");

                    b.HasIndex("ArtistId");

                    b.ToTable("Binders");
                });

            modelBuilder.Entity("TattooApp.Models.FlashCard", b =>
                {
                    b.Property<long>("FlashCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FlashCardId"));

                    b.Property<long>("BinderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Style")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlashCardId");

                    b.HasIndex("BinderId");

                    b.ToTable("FlashCards");
                });

            modelBuilder.Entity("TattooApp.Models.Specialty", b =>
                {
                    b.Property<long>("SpecialtyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SpecialtyId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecialtyId");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("ArtistSpecialty", b =>
                {
                    b.HasOne("TattooApp.Models.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TattooApp.Models.Specialty", null)
                        .WithMany()
                        .HasForeignKey("SpecialtiesSpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TattooApp.Models.Appointment", b =>
                {
                    b.HasOne("TattooApp.Models.Artist", "Artist")
                        .WithMany("Appointments")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("TattooApp.Models.Binder", b =>
                {
                    b.HasOne("TattooApp.Models.Artist", "Artist")
                        .WithMany("Binders")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("TattooApp.Models.FlashCard", b =>
                {
                    b.HasOne("TattooApp.Models.Binder", "Binder")
                        .WithMany("FlashCards")
                        .HasForeignKey("BinderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Binder");
                });

            modelBuilder.Entity("TattooApp.Models.Artist", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Binders");
                });

            modelBuilder.Entity("TattooApp.Models.Binder", b =>
                {
                    b.Navigation("FlashCards");
                });
#pragma warning restore 612, 618
        }
    }
}
